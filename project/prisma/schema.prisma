// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ROOT
  ADMIN
  MANAGER
  STAFF
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  hashedPassword String
  role           UserRole @default(STAFF)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  createdProducts      Product[]        @relation("CreatedBy")
  updatedProducts      Product[]        @relation("UpdatedBy")
  createdSuppliers     Supplier[]       @relation("SupplierCreatedBy")
  updatedSuppliers     Supplier[]       @relation("SupplierUpdatedBy")
  createdWarehouses    Warehouse[]      @relation("WarehouseCreatedBy")
  updatedWarehouses    Warehouse[]      @relation("WarehouseUpdatedBy")
  createdPurchases     PurchaseOrder[]  @relation("PurchaseCreatedBy")
  updatedPurchases     PurchaseOrder[]  @relation("PurchaseUpdatedBy")
  createdTransfers     TransferOrder[]  @relation("TransferCreatedBy")
  updatedTransfers     TransferOrder[]  @relation("TransferUpdatedBy")
  createdSales         SalesOrder[]     @relation("SalesCreatedBy")
  updatedSales         SalesOrder[]     @relation("SalesUpdatedBy")
  createdInventoryAudit InventoryAudit[] @relation("AuditCreatedBy")
  updatedInventoryAudit InventoryAudit[] @relation("AuditUpdatedBy")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products    Product[]
}

model Product {
  id              String    @id @default(uuid())
  sku             String    @unique
  name            String
  description     String?
  costPrice       Float?    // Can be null initially
  sellingPrice    Float
  safetyStock     Int       @default(0)
  categoryId      String
  createdById     String
  updatedById     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  category        Category  @relation(fields: [categoryId], references: [id])
  createdBy       User      @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy       User      @relation("UpdatedBy", fields: [updatedById], references: [id])
  inventoryItems  InventoryItem[]
  purchaseItems   PurchaseItem[]
  salesItems      SalesItem[]
  transferItems   TransferItem[]
  auditItems      AuditItem[]

  @@index([categoryId])
  @@index([createdById])
  @@index([updatedById])
}

model Supplier {
  id          String    @id @default(uuid())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  createdById String
  updatedById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy       User            @relation("SupplierCreatedBy", fields: [createdById], references: [id])
  updatedBy       User            @relation("SupplierUpdatedBy", fields: [updatedById], references: [id])
  purchaseOrders  PurchaseOrder[]

  @@index([createdById])
  @@index([updatedById])
}

model Warehouse {
  id          String    @id @default(uuid())
  name        String
  location    String?
  description String?
  createdById String
  updatedById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy           User            @relation("WarehouseCreatedBy", fields: [createdById], references: [id])
  updatedBy           User            @relation("WarehouseUpdatedBy", fields: [updatedById], references: [id])
  inventoryItems      InventoryItem[]
  sourcedTransfers    TransferOrder[] @relation("SourceWarehouse")
  destinationTransfers TransferOrder[] @relation("DestinationWarehouse")
  salesOrders         SalesOrder[]
  inventoryAudits     InventoryAudit[]

  @@index([createdById])
  @@index([updatedById])
}

model InventoryItem {
  id          String    @id @default(uuid())
  productId   String
  warehouseId String
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
  @@index([productId])
  @@index([warehouseId])
}

enum PurchaseStatus {
  DRAFT
  ORDERED
  RECEIVED
  CANCELLED
}

model PurchaseOrder {
  id          String         @id @default(uuid())
  orderNumber String         @unique
  supplierId  String
  status      PurchaseStatus @default(DRAFT)
  orderDate   DateTime       @default(now())
  deliveryDate DateTime?
  notes       String?
  createdById String
  updatedById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  supplier    Supplier       @relation(fields: [supplierId], references: [id])
  createdBy   User           @relation("PurchaseCreatedBy", fields: [createdById], references: [id])
  updatedBy   User           @relation("PurchaseUpdatedBy", fields: [updatedById], references: [id])
  items       PurchaseItem[]

  @@index([supplierId])
  @@index([createdById])
  @@index([updatedById])
}

model PurchaseItem {
  id             String        @id @default(uuid())
  purchaseOrderId String
  productId      String
  quantity       Int
  unitPrice      Float
  receivedQuantity Int          @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  purchaseOrder  PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product        Product       @relation(fields: [productId], references: [id])

  @@index([purchaseOrderId])
  @@index([productId])
}

enum TransferStatus {
  DRAFT
  PENDING
  COMPLETED
  CANCELLED
}

model TransferOrder {
  id                String         @id @default(uuid())
  transferNumber    String         @unique
  sourceWarehouseId String
  destWarehouseId   String
  status            TransferStatus @default(DRAFT)
  transferDate      DateTime       @default(now())
  notes             String?
  createdById       String
  updatedById       String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  sourceWarehouse   Warehouse      @relation("SourceWarehouse", fields: [sourceWarehouseId], references: [id])
  destinationWarehouse Warehouse   @relation("DestinationWarehouse", fields: [destWarehouseId], references: [id])
  createdBy         User           @relation("TransferCreatedBy", fields: [createdById], references: [id])
  updatedBy         User           @relation("TransferUpdatedBy", fields: [updatedById], references: [id])
  items             TransferItem[]

  @@index([sourceWarehouseId])
  @@index([destWarehouseId])
  @@index([createdById])
  @@index([updatedById])
}

model TransferItem {
  id              String        @id @default(uuid())
  transferOrderId String
  productId       String
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  transferOrder   TransferOrder @relation(fields: [transferOrderId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id])

  @@index([transferOrderId])
  @@index([productId])
}

enum SalesStatus {
  DRAFT
  COMPLETED
  CANCELLED
}

model SalesOrder {
  id              String      @id @default(uuid())
  salesNumber     String      @unique
  warehouseId     String
  status          SalesStatus @default(DRAFT)
  salesDate       DateTime    @default(now())
  customerName    String?
  customerContact String?
  notes           String?
  totalAmount     Float
  createdById     String
  updatedById     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  warehouse       Warehouse   @relation(fields: [warehouseId], references: [id])
  createdBy       User        @relation("SalesCreatedBy", fields: [createdById], references: [id])
  updatedBy       User        @relation("SalesUpdatedBy", fields: [updatedById], references: [id])
  items           SalesItem[]

  @@index([warehouseId])
  @@index([createdById])
  @@index([updatedById])
}

model SalesItem {
  id            String      @id @default(uuid())
  salesOrderId  String
  productId     String
  quantity      Int
  unitPrice     Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  salesOrder    SalesOrder  @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id])

  @@index([salesOrderId])
  @@index([productId])
}

enum AuditStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
}

model InventoryAudit {
  id            String      @id @default(uuid())
  auditNumber   String      @unique
  warehouseId   String
  status        AuditStatus @default(DRAFT)
  auditDate     DateTime    @default(now())
  notes         String?
  createdById   String
  updatedById   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  warehouse     Warehouse   @relation(fields: [warehouseId], references: [id])
  createdBy     User        @relation("AuditCreatedBy", fields: [createdById], references: [id])
  updatedBy     User        @relation("AuditUpdatedBy", fields: [updatedById], references: [id])
  items         AuditItem[]

  @@index([warehouseId])
  @@index([createdById])
  @@index([updatedById])
}

model AuditItem {
  id              String        @id @default(uuid())
  inventoryAuditId String
  productId       String
  systemQuantity  Int
  actualQuantity  Int
  discrepancy     Int
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  inventoryAudit  InventoryAudit @relation(fields: [inventoryAuditId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id])

  @@index([inventoryAuditId])
  @@index([productId])
}